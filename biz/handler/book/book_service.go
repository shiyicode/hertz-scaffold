// Code generated by hertz generator.

package book

import (
	"context"
	"net/http"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/errors"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"github.com/three-body/hertz-scaffold/biz/dal/query"
	"github.com/three-body/hertz-scaffold/biz/hmodel/book"
)

// ListBooks .
//
//	@router	/books [GET]
func ListBooks(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.ListBooksRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.ListBooksResponse)

	c.JSON(consts.StatusOK, resp)
}

// GetBook .
//
//	@router	/books/:id [GET]
func GetBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.GetBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.Book)

	c.JSON(consts.StatusOK, resp)
}

// CreateBook .
//
//	@router	/books/:id [POST]
func CreateBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.CreateBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.Book)

	c.JSON(consts.StatusOK, resp)
}

// UpdateBook .
//
//	@router	/books/:id [PUT]
func UpdateBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.UpdateBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.Book)

	c.JSON(consts.StatusOK, resp)
}

// RenameBook .
//
//	@router	/books/:id [PATCH]
func RenameBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.RenameBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(book.Book)

	c.JSON(consts.StatusOK, resp)
}

// DeleteBook .
//
//	@Summary	delete book
//	@Description
//	@Tags		book
//	@Accept		mpfd
//	@Produce	json
//	@Param		id	path		string	true	"id"
//	@Success	200	{object}	book.Book
//	@Security	JWT
//	@Router		/books/{id} [DELETE]
func DeleteBook(ctx context.Context, c *app.RequestContext) {
	var err error
	var req book.DeleteBookRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	if err = req.IsValid(); err != nil {
		c.JSON(http.StatusBadRequest, err)
		return
	}

	info, err := query.Book.WithContext(ctx).Where(query.Book.ID.Eq(uint64(req.ID))).Delete()
	if err != nil {
		c.JSON(http.StatusInternalServerError, errors.NewPrivate(err.Error()).SetMeta("delete book failed").JSON())
		return
	}
	// resp := new(book.Book)

	c.JSON(consts.StatusOK, info)
}
